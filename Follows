Additive-expression ) , ; ]
Additive-expression-prime ) , ; < == ]
Additive-expression-zegond ) , ; < == ]
Addop ( ID NUM
Arg-list )
Arg-list-prime )
Args )
B ) , ; ]
C ) , ; ]
Compound-stmt $ ( ; ID NUM break else endif if int repeat return until void { }
D ) , ; < == ]
Declaration $ ( ; ID NUM break if int repeat return void { }
Declaration-initial ( ) , ; [
Declaration-list $ ( ; ID NUM break if repeat return { }
Declaration-prime $ ( ; ID NUM break if int repeat return void { }
Else-stmt ( ; ID NUM break else endif if repeat return until { }
Expression ) , ; ]
Expression-stmt ( ; ID NUM break else endif if repeat return until { }
Factor ) * + , - ; < == ]
Factor-prime ) * + , - ; < == ]
Factor-zegond ) * + , - ; < == ]
Fun-declaration-prime $ ( ; ID NUM break if int repeat return void { }
G ) + , - ; < == ]
H ) , ; ]
Iteration-stmt ( ; ID NUM break else endif if repeat return until { }
Param ) ,
Param-list )
Param-prime ) ,
Params )
Program $
Relop ( ID NUM
Return-stmt ( ; ID NUM break else endif if repeat return until { }
Return-stmt-prime ( ; ID NUM break else endif if repeat return until { }
Selection-stmt ( ; ID NUM break else endif if repeat return until { }
Simple-expression-prime ) , ; ]
Simple-expression-zegond ) , ; ]
Statement ( ; ID NUM break else endif if repeat return until { }
Statement-list }
Term ) + , - ; < == ]
Term-prime ) + , - ; < == ]
Term-zegond ) + , - ; < == ]
Type-specifier ID
Var-call-prime ) * + , - ; < == ]
Var-declaration-prime $ ( ; ID NUM break if int repeat return void { }
Var-prime ) * + , - ; < == ]